name: ‚ö° Performance Monitoring

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'scripts/performance-validation.ts'
  
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
  
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  
  # Allow manual performance testing
  workflow_dispatch:
    inputs:
      tests:
        description: 'Specific tests to run (comma-separated)'
        required: false
        default: 'all'
      verbose:
        description: 'Verbose output'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  # F1-inspired performance validation
  performance-validation:
    name: üèéÔ∏è F1 Performance Validation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: Linux
          - os: macos-latest
            platform: macOS
          - os: windows-latest
            platform: Windows
    
    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4
      
      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì• Install dependencies
        run: npm ci
      
      - name: üèóÔ∏è Build project
        run: npm run build
      
      - name: üîó Link CLI globally
        run: npm link
      
      - name: üèéÔ∏è Run performance validation
        id: performance
        run: |
          echo "üöÄ Running F1-inspired performance tests on ${{ matrix.platform }}..."
          
          if [[ "${{ github.event.inputs.tests }}" != "" && "${{ github.event.inputs.tests }}" != "all" ]]; then
            npm run performance -- --tests ${{ github.event.inputs.tests }}
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Faster CI tests for PRs
            npm run performance:ci
          else
            # Full test suite
            npm run performance:full
          fi
      
      - name: üìä Upload performance report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-report-${{ matrix.platform }}
          path: performance-report.json
          retention-days: 30
      
      - name: üéØ Performance regression check
        if: github.event_name == 'pull_request'
        run: |
          echo "üîç Checking for performance regressions..."
          
          # This would compare against baseline in a real implementation
          # For now, just ensure core commands meet basic thresholds
          
          echo "‚úÖ Performance regression check complete"

  # Aggregate results and create summary
  performance-summary:
    name: üìä Performance Summary
    needs: performance-validation
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4
      
      - name: üíæ Download all performance reports
        uses: actions/download-artifact@v3
        with:
          path: performance-reports
      
      - name: üìä Generate cross-platform summary
        run: |
          echo "üèÅ F1-Inspired Performance Summary"
          echo "=================================="
          echo ""
          
          echo "üìã Test Results by Platform:"
          for platform in Linux macOS Windows; do
            report_file="performance-reports/performance-report-${platform}/performance-report.json"
            if [[ -f "$report_file" ]]; then
              echo "üñ•Ô∏è $platform:"
              
              # Extract key metrics using jq if available, otherwise use basic parsing
              if command -v jq > /dev/null; then
                score=$(jq -r '.summary.overallScore' "$report_file" 2>/dev/null || echo "N/A")
                passed=$(jq -r '.summary.passed' "$report_file" 2>/dev/null || echo "N/A")
                total=$(jq -r '.summary.totalTests' "$report_file" 2>/dev/null || echo "N/A")
                echo "   Score: ${score}% (${passed}/${total} tests passed)"
              else
                echo "   Report available (jq not installed for detailed parsing)"
              fi
              echo ""
            else
              echo "üñ•Ô∏è $platform: Report not found"
              echo ""
            fi
          done
          
          echo "üéØ Performance Standards:"
          echo "  ‚Ä¢ Status command: <38ms (git status equivalent)"
          echo "  ‚Ä¢ Trust dashboard: <40ms (real-time calculation)"
          echo "  ‚Ä¢ Help/Index: <100ms (instant reference)"
          echo ""
          echo "üèÜ Championship engineering demands measurable speed!"
      
      - name: üìà Performance trend analysis
        if: github.ref == 'refs/heads/main'
        run: |
          echo "üìà Performance trend analysis would go here"
          echo "üéØ Track improvements over time"
          echo "‚ö° Detect performance regressions early"
          echo "üèÜ Maintain championship standards"

  # Performance regression prevention
  performance-gate:
    name: üö™ Performance Gate
    needs: performance-validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: üéØ Performance gate check
        run: |
          echo "üö™ Performance Gate: Ensuring championship standards"
          echo ""
          echo "‚úÖ All performance tests must pass for merge"
          echo "‚ö° Core commands must meet F1-inspired speed targets"
          echo "üèÜ No regressions allowed in championship engineering"
          echo ""
          echo "üèÅ Performance gate: PASSED"

  # Schedule performance alerts
  performance-alerts:
    name: üö® Performance Alerts
    needs: performance-validation
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: üö® Performance degradation alert
        run: |
          echo "üö® PERFORMANCE ALERT: Championship standards not met!"
          echo ""
          echo "‚ö° F1-inspired engineering demands immediate attention"
          echo "üîß Performance tuning required to maintain standards"
          echo "üèéÔ∏è Every millisecond matters in championship software"
          echo ""
          echo "üìä Check performance reports for detailed analysis"
          echo "üéØ Restore championship performance levels"