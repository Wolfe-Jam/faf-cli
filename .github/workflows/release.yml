name: 🚀 Release Pipeline

on:
  push:
    tags: ['v*']
  
  # Allow manual releases
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v2.8.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  # Pre-flight validation
  validate:
    name: 🔍 Pre-flight Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci
      
      - name: 🏗️ Build project
        run: npm run build
      
      - name: 🧪 Run full test suite
        run: |
          npm run test
          npm run test:audit
      
      - name: 🔧 ESLint validation
        run: npm run lint
      
      - name: 🎯 Extract version info
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # Detect pre-release from tag (contains alpha, beta, rc)
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "🏷️ Version: $VERSION"
          echo "🧪 Pre-release: $IS_PRERELEASE"

  # Cross-platform testing
  test-matrix:
    name: 🧪 Cross-Platform Testing
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['16', '18', '20']
        exclude:
          # Reduce matrix size - test Node 16 only on Ubuntu
          - os: windows-latest
            node-version: '16'
          - os: macos-latest
            node-version: '16'
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
      
      - name: ⚡ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci
      
      - name: 🏗️ Build project
        run: npm run build
      
      - name: 🧪 Run tests
        run: npm test
      
      - name: 🎯 Test CLI functionality
        run: |
          # Test basic CLI commands
          node dist/cli.js --version
          node dist/cli.js --help

  # Build release artifacts
  build-artifacts:
    name: 🏗️ Build Release Artifacts
    needs: [validate, test-matrix]
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
      
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci
      
      - name: 🏗️ Build project
        run: npm run build
      
      - name: 📦 Create package
        run: npm pack
      
      - name: 📊 Package info
        run: |
          echo "🏷️ Package created:"
          ls -la *.tgz
          
          echo "📦 Package contents:"
          tar -tzf *.tgz | head -20
      
      - name: 💾 Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: npm-package
          path: '*.tgz'
          retention-days: 30

  # Generate changelog
  changelog:
    name: 📝 Generate Changelog
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [[ -n "$LAST_TAG" ]]; then
            echo "📅 Changes since $LAST_TAG:"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            echo "📅 Initial release - all commits:"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
          fi
          
          # Save multiline output safely
          {
            echo 'changelog<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  # Publish to NPM
  publish-npm:
    name: 📢 Publish to NPM
    needs: [validate, test-matrix, build-artifacts, changelog]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
      
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: 📥 Install dependencies
        run: npm ci
      
      - name: 🏗️ Build project
        run: npm run build
      
      - name: 🔐 Verify package before publish
        run: |
          echo "🔍 Verifying package integrity..."
          npm pack --dry-run
          
          echo "📋 Package details:"
          npm info @faf/cli --json | jq '.versions[-5:]'
      
      - name: 📢 Publish to NPM
        run: |
          if [[ "${{ needs.validate.outputs.is-prerelease }}" == "true" ]]; then
            echo "🧪 Publishing pre-release to NPM..."
            npm publish --tag beta --access public
          else
            echo "🚀 Publishing stable release to NPM..."
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: 🎉 NPM publish success
        run: |
          echo "✅ Successfully published @faf/cli@${{ needs.validate.outputs.version }}"
          echo "📦 Available at: https://www.npmjs.com/package/@faf/cli"
          echo "💻 Install with: npm install -g @faf/cli"

  # Create GitHub release
  github-release:
    name: 🏷️ Create GitHub Release
    needs: [validate, test-matrix, build-artifacts, changelog, publish-npm]
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
      
      - name: 💾 Download package artifact
        uses: actions/download-artifact@v3
        with:
          name: npm-package
      
      - name: 🏷️ Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: FAF CLI ${{ needs.validate.outputs.version }}
          body: |
            # 🏎️ FAF CLI ${{ needs.validate.outputs.version }}
            
            **F1-Inspired Software Engineering** - Making AI development better for everyone! 🏁
            
            ## 🚀 Installation
            
            ```bash
            npm install -g @faf/cli@${{ needs.validate.outputs.version }}
            ```
            
            ## 📋 Changes
            
            ${{ needs.changelog.outputs.changelog }}
            
            ## 🎯 Quick Start
            
            ```bash
            # Create .faf file for your project
            faf init
            
            # Check your AI context score
            faf score --details
            
            # Build trust with AI
            faf trust
            ```
            
            ## 📊 Performance Metrics
            
            - ⚡ Status command: <40ms (F1-inspired speed)
            - 🎯 Trust calculation: <200ms
            - 💎 Technical credit system active
            - 🏆 Championship-grade engineering
            
            ## 🔗 Links
            
            - 📦 [NPM Package](https://www.npmjs.com/package/@faf/cli)
            - 📚 [Documentation](https://docs.faf.one)
            - 🐛 [Report Issues](https://github.com/faf-org/cli/issues)
            - 💬 [Discussions](https://github.com/faf-org/cli/discussions)
            
            ---
            
            **🏁 Trust-driven development starts here!**
          draft: false
          prerelease: ${{ needs.validate.outputs.is-prerelease == 'true' }}
      
      - name: 📎 Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.tgz
          asset_name: faf-cli-${{ needs.validate.outputs.version }}.tgz
          asset_content_type: application/gzip

  # Performance benchmarks
  performance-benchmark:
    name: ⚡ Performance Validation
    needs: [validate, publish-npm]
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
      
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📥 Install published package
        run: |
          echo "🔄 Installing published version..."
          npm install -g @faf/cli@${{ needs.validate.outputs.version }}
          faf --version
      
      - name: 🏎️ F1-Inspired Performance Tests
        run: |
          echo "⚡ Testing championship performance claims..."
          
          # Test status command speed (<40ms target)
          echo "🎯 Testing 'faf status' speed..."
          time faf status || echo "No .faf file found (expected)"
          
          # Test help command speed
          echo "📚 Testing 'faf --help' speed..."
          time faf --help
          
          # Test index command speed
          echo "📋 Testing 'faf index' speed..."
          time faf index
          
          echo "✅ Performance validation complete!"

  # Notification
  notify-success:
    name: 🎉 Success Notification
    needs: [validate, test-matrix, build-artifacts, publish-npm, github-release, performance-benchmark]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: 🏆 Championship Success!
        run: |
          echo "🏁 🏎️ FAF CLI ${{ needs.validate.outputs.version }} RELEASED! ⚡🏆"
          echo ""
          echo "✅ All systems green - Championship engineering delivered!"
          echo "🚀 NPM: Published and ready"
          echo "🏷️ GitHub: Release created"
          echo "⚡ Performance: F1-validated"
          echo "📊 Analytics: Tracking enabled"
          echo ""
          echo "🎯 Trust-driven development is now available to everyone!"
          echo "📦 Install: npm install -g @faf/cli@${{ needs.validate.outputs.version }}"

  # Failure notification
  notify-failure:
    name: 🚨 Failure Notification
    needs: [validate, test-matrix, build-artifacts, publish-npm, github-release]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: 🚨 Release Failed
        run: |
          echo "❌ FAF CLI ${{ needs.validate.outputs.version }} release failed!"
          echo "🔧 Check the workflow logs for details"
          echo "🏎️ F1-inspired engineering demands perfection - we'll fix this!"