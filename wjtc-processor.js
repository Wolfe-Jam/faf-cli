#!/usr/bin/env node

/**
 * WJTC Report Processor (Simple Version)
 * Processes test reports and updates dashboard
 */

const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');

class WJTCProcessor {
  constructor() {
    this.reportsDir = './wjtc-reports';
    this.dashboardFile = './WJTC-DASHBOARD.md';

    if (!fs.existsSync(this.reportsDir)) {
      fs.mkdirSync(this.reportsDir, { recursive: true });
    }
  }

  processReport(reportPath) {
    console.log('üèéÔ∏è WJTC Report Processor v1.0.0');
    console.log('‚îÅ'.repeat(50));

    try {
      // Load report
      const reportContent = fs.readFileSync(reportPath, 'utf8');
      const report = yaml.load(reportContent);

      // Display summary
      console.log(`Platform: ${report.report_metadata.platform}`);
      console.log(`Test Date: ${report.report_metadata.test_date}`);
      console.log(`Commands: ${report.test_scope.commands_tested}/${report.test_scope.total_commands}`);
      console.log(`Success Rate: ${report.test_scope.success_count}/${report.test_scope.commands_tested}`);
      console.log(`Coverage: ${report.test_scope.coverage_percentage}%`);

      if (report.display_quality) {
        console.log(`Display Quality: ${report.display_quality.overall_score}/10`);
      }

      // Update dashboard
      this.updateDashboard(report);

      // Check certification
      if (report.certification?.certified) {
        console.log('‚îÅ'.repeat(50));
        console.log(`üèÖ CERTIFIED ${report.certification.certification_level.toUpperCase()}!`);
      }

      console.log('‚îÅ'.repeat(50));
      console.log('‚úÖ Report processed successfully!');

    } catch (error) {
      console.error('‚ùå Error:', error.message);
    }
  }

  updateDashboard(report) {
    const dashboard = `# üèÜ WJTC Dashboard - Live Testing Results

*Last Updated: ${new Date().toISOString()}*

## üìä Latest Test: ${report.report_metadata.platform.toUpperCase()}

### Test Results
- **Date:** ${report.report_metadata.test_date}
- **Coverage:** ${report.test_scope.coverage_percentage}%
- **Success:** ${report.test_scope.success_count}/${report.test_scope.commands_tested}
- **Display Quality:** ${report.display_quality?.overall_score || 'N/A'}/10

### Command Categories
${Object.entries(report.category_results || {})
  .map(([cat, data]) => `- **${cat}:** ${data.status} ‚úÖ`)
  .join('\n')}

### Issues Found
${(report.issues || [])
  .map(issue => `- [${issue.severity}] ${issue.command}: ${issue.description}`)
  .join('\n') || 'None!'}

### Summary
${report.summary?.verdict || ''}

### Key Findings
${(report.summary?.key_findings || [])
  .map(finding => `- ${finding}`)
  .join('\n')}

${report.certification?.certified ?
  `## üèÖ Certification Status\n\n**CERTIFIED ${report.certification.certification_level.toUpperCase()}** ‚úÖ`
  : ''}

---
*Generated by WJTC Report Processor*
`;

    fs.writeFileSync(this.dashboardFile, dashboard);
    console.log('‚úÖ Dashboard updated: WJTC-DASHBOARD.md');
  }
}

// Run processor
if (require.main === module) {
  const args = process.argv.slice(2);

  if (args.length === 0) {
    console.log('Usage: node wjtc-processor.js <report-file>');
    process.exit(1);
  }

  const processor = new WJTCProcessor();
  processor.processReport(args[0]);
}